## Lecture 6 - Desugaring ##

### Learning Goals ###

 - distinction between 'static' and 'dynamic'
 - explain the relationship of a desurgarer to the parser and interpreter
 - justify the use of desuargaring on various grounds
  - its impact on the programmer's interfaces
  - the languages implementation's complexity
  - the tractability (doable-ness) of useful reasoning over the language
  - and the software engineering advantages of isolating components of the interpreter system
 - extend a surfact language over an existing core language using a desurgarer

### Why Desugar? ###

 - allows us to build different surface languages atop a single core
 - may make either the program or the interpreter faster
 - better grasp of semantics in 'leaner' core language
 - separation of conerns: don't worry simultaneously about user interface needs and language design needs
 - customize the language to the domain at hand
 - simpler maintenance for core language 
 - keep the same surface syntax but improve the underlying language (backwards compatibility)
 
 *More...*
 
 - present the programmer with a 'friendlier' interface
 - reduce a complex language to a simpler one to make our language implementation job easier
 - reduce a complex language to a simple core to make it easier to reason about the core
 	- security
 	- correctness
 	- resource use
 - add desired features to the language without complicating its implementation

## Lecture 7 - Functions Intro ##

### Learning Goals ###

- Explain in context four of the key features of a function
 - delaying evaluation of the function body
 - allowing evaluation of the function body from (possibly distant) locations in the program
 - blocking out bindings from the function's dynamic context
 - "allowing in" a dynamica value vai the parameters

- Formal parameters vs. actual parameters
 - distinguish between formal and actual parameters
 	- formal parameters are the names give to argument values within the function
 	- actual parameters are the argument expressions whose values (under eager evaluation) are bound to the formal parameters
 - identify formal and actual parameters in context

- Function calls vs function definitions
 - distinguish between a function call (aka function 'application') and a function 'definition'
 	- a function call is application of a previously defined function to actual parameters, which causes the function body to be evaluated.
 	- a function definition creates a function (prepares it to be used) with formal parameters and a body but does not evaluate the body yet
 - identify function calls and definitions in context

 - Bound vs unbound identifiers
  - define bound and unbound identifier, including illustrating their meanings with examples
  - identify bound and unbound identifiers in context
  - define scope with respect to identifier
  	- the scope of an identifier's binding is the protion of the program in which that binding is visible. In Racket, bindings use lexical (aka static) scope. However, Racket does have a facility for something like dynamic scope.

 - Eager evaluation vs lazy evaluation
  - Explain the basic different between lazy and eager evaluation.
  	- in lazy evaluation, actual parameters are not evaluated before proceeding with a function call. Formal parameters are bound to the actual parameter expressions, not their values.
  	- in eager evaluation, actual parameters are evaluated prior to proceeding with a function call, and the function's formal parameters are bound to the resulting values.
  - be able to distinguish between lazy and eager evaluation regimes by evaluating (and possibly providing a test case that behaves differently under the two regimes
  - alter existing substitution and interpreter code to switch back and forth between lazy and eager evaluation regimes

### Function Test Cases ###

*What happens...*

 - in 'normal' cases where we call a natural-seeming function and it does its thing
 - when a function calls another function
 - when a function calls itself (requires conditionals)
 - when a function does not use its parameters
 - when a function uses its parameter twice (how can we tell?)
 	- look for multiple references to the identifier. it will always have one binding site where it's defined, but it may be referenced multiple times
 - when a function's 'actual parameter' is an identifier
 - when we try to use an identifier that is not bound anywhere
 - when we try to use an identifier that's bound in the function that calls the current function
 	- if this is allowed, it means our language has dynamic scope for identifiers. in other words, an identifier binding made in a particular part of the program may be used in a totally unrelated part of the program just because this part of the program calls a function in that part (or calls a function that calls a function that....
 - how could we tell the different between lazy and eager evaluation semantics? can we teset for the appropriate semantics? what do we need to be able to do such a test?
  	
  
